<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大帅归来</title>
    <description>The world has kissed my soul with its pain, asking for its return in songs. 世界以痛吻我，我要报之以歌。
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 01 Feb 2018 01:43:53 +0800</pubDate>
    <lastBuildDate>Thu, 01 Feb 2018 01:43:53 +0800</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>RSA算法原理</title>
        <description>&lt;p&gt;上一篇简单介绍了RSA，这里在非常具体的讲一下，关于数学的部分直接给结论，没有证明最多在后面提一下是什么&lt;/p&gt;

&lt;p&gt;文章来源于网络上一篇叫做《RSA算法原理》的文章 非常的好 但是没法都撸过来&lt;br /&gt;
这是目前地球上最重要的加密算法。&lt;/p&gt;

&lt;p&gt;Alence 让Bob 把文件发给他，
大致流程是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A在自己的电脑上生成一个公钥一个私钥&lt;/li&gt;
  &lt;li&gt;A用明文在非常危险的网络中明目张胆把公钥发给了BOB&lt;/li&gt;
  &lt;li&gt;BOB拿到公钥兴高采烈的把自己的文件用这个公钥加了密&lt;/li&gt;
  &lt;li&gt;然后他把加了密后的文件用同样网络发给了Alence&lt;/li&gt;
  &lt;li&gt;Alence收到了密文后用自己手上没有公开的私钥解开了&lt;/li&gt;
  &lt;li&gt;欧耶 完了&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;密钥生成&quot;&gt;密钥生成&lt;/h1&gt;

&lt;p&gt;我们通过一个例子，来理解RSA算法。爱丽丝她该怎么生成公钥和私钥呢？&lt;br /&gt;
第一步，随机选择两个不相等的质数p和q。&lt;br /&gt;
爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）&lt;br /&gt;
第二步，计算p和q的乘积n。&lt;br /&gt;
爱丽丝就把61和53相乘。&lt;br /&gt;
	&lt;code class=&quot;highlighter-rouge&quot;&gt;n = 61×53 = 3233&lt;/code&gt;&lt;br /&gt;
n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。&lt;br /&gt;
实际应用中，RSA密钥一般是1024位，重要场合则为2048位。&lt;br /&gt;
第三步，计算n的欧拉函数φ(n)。&lt;br /&gt;
根据公式：&lt;br /&gt;
	&lt;code class=&quot;highlighter-rouge&quot;&gt;φ(n) = (p-1)(q-1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;爱丽丝算出φ(3233)等于60×52，即3120。&lt;br /&gt;
第四步，随机选择一个整数e，要求在1到3120之间&lt;br /&gt;
爱丽丝随机选择了17。（实际应用中，常常选择65537。）&lt;br /&gt;
第五步，计算e对于φ(n)的模反元素d。&lt;br /&gt;
所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。&lt;br /&gt;
	&lt;code class=&quot;highlighter-rouge&quot;&gt;ed ≡ 1 (mod φ(n))&lt;/code&gt;&lt;br /&gt;
这个式子等价于&lt;br /&gt;
	&lt;code class=&quot;highlighter-rouge&quot;&gt;ed - 1 = kφ(n)&lt;/code&gt;&lt;br /&gt;
于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。&lt;br /&gt;
	&lt;code class=&quot;highlighter-rouge&quot;&gt;ex + φ(n)y = 1&lt;/code&gt;&lt;br /&gt;
已知 e=17, φ(n)=3120，&lt;br /&gt;
	&lt;code class=&quot;highlighter-rouge&quot;&gt;17x + 3120y = 1&lt;/code&gt;&lt;br /&gt;
这个方程可以用”扩展欧几里得算法”求解。&lt;br /&gt;
总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，y直接扔掉没有毛用，只留下 d=2753。&lt;br /&gt;
至此所有计算完成。&lt;br /&gt;
第六步，将n和e封装成公钥，n和d封装成私钥。&lt;br /&gt;
在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。&lt;/p&gt;

&lt;h1 id=&quot;可靠性&quot;&gt;可靠性&lt;/h1&gt;
&lt;p&gt;公钥中公开的是n和e，而A手中的是n和d，根据加解密规则下面可以看到，n是公开的，谁有d谁就可以解密。&lt;/p&gt;

&lt;p&gt;那么，有无可能在已知n和e的情况下，推导出d？&lt;br /&gt;
	（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。&lt;br /&gt;
	（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。&lt;br /&gt;
	（3）n=pq。只有将n因数分解，才能算出p和q。&lt;br /&gt;
结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。&lt;br /&gt;
可是，大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。&lt;br /&gt;
维基百科这样写道：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，
RSA算法愈可靠。
假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。
今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。
只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。”
举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;12301866845301177551304949583849627207728535695953347921973224521517264&lt;br /&gt;
00507263657518745202199786469389956474942774063845925192557326303453731&lt;br /&gt;
54826850791702612214291346167042921431160222124047927473779408066535141&lt;br /&gt;
9597459856902143413&lt;/p&gt;

&lt;p&gt;它等于这样两个质数的乘积：&lt;/p&gt;

&lt;p&gt;33478071698956898786044169
84821269081770479498371376
85689124313889828837938780
02287614711652531743087737
814467999489&lt;br /&gt;
　　　　×&lt;br /&gt;
36746043666799590428244633
79962795263227915816434308
76426760322838157396665112
79233373417143396810270092
798736308917&lt;br /&gt;
事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分
解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。&lt;/p&gt;

&lt;h1 id=&quot;密钥的使用&quot;&gt;密钥的使用&lt;/h1&gt;

&lt;p&gt;有了公钥和密钥，就能进行加密和解密了。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;（1）加密要用公钥 (n,e)&lt;br /&gt;
假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。&lt;br /&gt;
这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。&lt;br /&gt;
所谓”加密”，就是算出下式的c：&lt;br /&gt;
　　me ≡ c (mod n)&lt;br /&gt;
爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：&lt;br /&gt;
　　6517 ≡ 2790 (mod 3233)&lt;br /&gt;
于是，c等于2790，鲍勃就把2790发给了爱丽丝。&lt;/li&gt;
  &lt;li&gt;（2）解密要用私钥(n,d)&lt;br /&gt;
爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。&lt;br /&gt;
可以证明，下面的等式一定成立：&lt;br /&gt;
　　cd ≡ m (mod n)&lt;br /&gt;
也就是说，c的d次方除以n的余数为m。&lt;br /&gt;
现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出&lt;br /&gt;
　　27902753 ≡ 65 (mod 3233)&lt;br /&gt;
因此，爱丽丝知道了鲍勃加密前的原文就是65。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至此，”加密–解密”的整个过程全部完成。&lt;br /&gt;
我们可以看到，如果不知道d，就没有办法从c求出m。&lt;br /&gt;
而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。&lt;br /&gt;
你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？&lt;br /&gt;
有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种”对称性加密算法”（比
如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。&lt;/p&gt;

&lt;p&gt;加解密过程不证明了 因为历史已经验证了 基本上随便你干个啥都用了这个过程&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;Jude&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;2018年2月1日&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/other/2018/02/01/RSA.html</link>
        <guid isPermaLink="true">http://localhost:4000/other/2018/02/01/RSA.html</guid>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>关于SSH</title>
        <description>&lt;h1 id=&quot;rsa算法&quot;&gt;RSA算法&lt;/h1&gt;
&lt;p&gt;RSA公钥加密算法是1977年由三个麻省理工的罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。&lt;br /&gt;
好我们来看一下这个三个帅哥跟哥到底哪个帅-_-&lt;br /&gt;
&lt;img src=&quot;http://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=405938069b504fc2b652b85784b48c74/d01373f082025aafcb78cac5fbedab64034f1a71.jpg&quot; alt=&quot;三个帅哥&quot; title=&quot;你遭烧了哈哈哈&quot; /&gt;&lt;br /&gt;
（其实顺便是测试用markdown外连图片是不是可行的 或者图片挂了跑不出来或者鼠标悬停上去会出现什么字段 啊哈哈哈测试成功)&lt;br /&gt;
RSA是目前最有影响力和最常用的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击&lt;br /&gt;
今天只有短的RSA钥匙才可能被强力方式解破。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。&lt;/p&gt;

&lt;p&gt;原理一句话说明 非常简单简单到不行 一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。&lt;br /&gt;
我随便找两个非常大的质数p和q，这么大（两只手伸直了185cm），然后做一个乘法运算算出来m=pq 好了 我手上一共三个数 p q m 他们之间有非常简单的关系 然后我把m送给你作为公开加密密钥 但是这时候你依靠徒劳的j算是几乎不可能得出p和q的 因为实在太大了。&lt;/p&gt;

&lt;p&gt;类似的在公开密钥密码体制中，加密密钥（即公开密钥）m是公开信息，而解密密钥（即秘密密钥）p是需要保密的。加密算法E和解密算法D也都是公开的。虽然解密密钥p是由公开密钥m决定的，但却不能根据m计算出q。&lt;/p&gt;

&lt;p&gt;正是基于这种理论，1978年出现了著名的RSA算法，它通常是先生成一对RSA 密钥，其中之一是保密密钥，由用户保存；另一个为公开密钥，可对外公开，甚至可在网络服务器中注册。为提高保密强度，RSA密钥至少为500位长，一般推荐使用1024位。这就使加密的计算量很大。&lt;/p&gt;

&lt;p&gt;这里还忘了说了这个公钥m私钥p怎么用的问题，一般解释为你拿一个去加密，另一个才可以解开。&lt;/p&gt;

&lt;h1 id=&quot;ssh&quot;&gt;SSH&lt;/h1&gt;
&lt;p&gt;下面来说这个东西 SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。&lt;br /&gt;
上面是百度百科，用人话说就是他在传输过程中是加密了的，保证了中间人听了也听不懂。
有两种方式：&lt;br /&gt;
1.每次传输输入用户密码 这个一般都会烦死 然后跳楼
2.生成一堆钥匙，公钥放在服务器，私钥你捏在手上，一直用这个传。这个然你怀疑是不是都没有加过密。。。。&lt;/p&gt;

&lt;h1 id=&quot;github-在windows下的配置&quot;&gt;github 在windows下的配置&lt;/h1&gt;
&lt;p&gt;这就好说了 我们生成一堆这个钥匙 公钥挂给github端 私钥揣在包包头 欧耶
win的cmd是不得行的 需要用git工具的命令行
1.打开git bash 一定要用这个不要用win的cmd&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.ssh
    bash: &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;: /c/Users/Administrator/.ssh: No such file or directory&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;结果表示目录不存在，创建即可&lt;br /&gt;
2.生成ssh一对密钥&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your_email@example.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中那个邮箱是你的自己的登录github的那个
代码参数含义：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;-t 指定密钥类型，默认是 rsa ，可以省略。&lt;/li&gt;
  &lt;li&gt;-C 设置注释文字，比如邮箱。&lt;/li&gt;
  &lt;li&gt;-f 指定密钥文件存储文件名。
就安排了出来是这个结果&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xxxxxx@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;这里隐去真实地址&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/c/Users/Administrator/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Created directory &lt;span class=&quot;s1&quot;&gt;'/c/Users/Administrator/.ssh'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /c/Users/Administrator/.ssh/id_rsa.
Your public key has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /c/Users/Administrator/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:eOOtYIsIRgKBU77zC9VPWXr7s/SmQwhfvMgPjS7dpKQ xxxxxxxx@gmail.com
The key&lt;span class=&quot;s1&quot;&gt;'s randomart image is:
+---[RSA 2048]----+
|o..              |
|oo               |
|...       ..     |
|.  . . ..+  o    |
|..o . o S+.* .   |
|o  +   = +O.=    |
|... . o o=oB.    |
|.. o + oE.+o=..  |
|  . o . ..  +*.  |
+----[SHA256]-----+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下面那个什么图看起来有点神秘哈哈哈&lt;br /&gt;
是不是青蛙去旅行回来了&lt;/p&gt;

&lt;p&gt;然后里面说了你的私钥是/c/Users/Administrator/.ssh/id_rsa.&lt;br /&gt;
公钥public是/c/Users/Administrator/.ssh/id_rsa.pub.&lt;/p&gt;

&lt;p&gt;然后把公钥粘贴到github网站上面有个放公钥的地方
然后以后每次push 就啥子密码都不用输入了&lt;br /&gt;
登录你的github，头像处下拉框选择settings。
进入设置页后点击侧边栏的SSH and GPG keys按钮。
点击New SSH key,title可以任意填，
生成的公钥id_rsa.pub的内容复制到这里的key输入框中。&lt;/p&gt;

&lt;p&gt;最后在本地确认一下就可以了&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; git@github.com
The authenticity of host &lt;span class=&quot;s1&quot;&gt;'github.com (192.30.255.112)'&lt;/span&gt; can&lt;span class=&quot;s1&quot;&gt;'t be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? y
Please type '&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' or '&lt;/span&gt;no&lt;span class=&quot;s1&quot;&gt;': yes
Warning: Permanently added '&lt;/span&gt;github.com,192.30.255.112&lt;span class=&quot;s1&quot;&gt;' (RSA) to the list of known hosts.
Hi wangjizhu! You'&lt;/span&gt;ve successfully authenticated, but GitHub does not provide shell access.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后提醒一下 如果要是从https鞋换成ssh的需要一个命令
先去仓库页面找到ssh的地址是什么一般长的这个样子&lt;br /&gt;
git@github.com后面一串&lt;br /&gt;
而https是https开头的&lt;/p&gt;

&lt;p&gt;然后运行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$git&lt;/span&gt; remote set-url origin &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ssh的url]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;就换了&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;Jude&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;2018年1月28日&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/other/2018/01/29/about-SSH.html</link>
        <guid isPermaLink="true">http://localhost:4000/other/2018/01/29/about-SSH.html</guid>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>关于回车的故事</title>
        <description>&lt;p&gt;很多年前人类还在流行机械统治世界的时候，有几个神人闲的蛋疼发明了机械式打印机，那个机器打起自来噼里啪啦，每按一个键，就会翻上去一个字母狠狠撞击在纸上，留下美丽的痕迹。每打一个字那个打字的小车Carriage移动一下，令人心旷神怡。&lt;br /&gt;
打完了一个段落，打字员会做两件事情：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;把那个小车用手刨到最左边档头上。注意了这个动作用汉语非常简洁的概括了叫做”回车”！没错！就是回那个车车，看清楚了就是把那个车回到头上，使动用法。英文叫Carriage-Return 简称CR&lt;/li&gt;
  &lt;li&gt;把那个纸卷一下，这样车车回对着下一行开始的地方，也就是换行。英文叫Line-Feed LF&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对了 这回说清楚了 一点毛病没有 继续噼里啪啦开始打字&lt;br /&gt;
回到正题 等于这里面用了两个标志 CR 和 LF&lt;br /&gt;
windows就是这样记录的 巴巴适适的 回车和换行&lt;br /&gt;
结果尼玛不晓得类Unix的程序员是脑壳达铁了还是怎么了&lt;br /&gt;
觉得那个打字机是历史习惯问题，我用两个标志来表示的”光标移动到下一行开头” 是一件很傻逼的事情 如果一篇文本里面有很多是很浪费的 比如有个人叫李白的人喜欢竖着写字：&lt;br /&gt;
床前 (光标移动到下一行开头)&lt;br /&gt;
明月 (光标移动到下一行开头)&lt;br /&gt;
光 (光标移动到下一行开头)&lt;br /&gt;
假设一个汉字占一个单位 光标移动到下一行开头占两个单位 那么这个”光标移动到下一行开头”占用的空间比尼玛内容还多一个单位 怎么可能&lt;br /&gt;
所以那个我完全可以定义一个标志来表示 LF足矣&lt;/p&gt;

&lt;p&gt;至于用的哪种实际上用户直观感觉不到， 直观感觉就是按了一下enter键 然后光标跑下一行首了&lt;br /&gt;
这个动作实际上是编辑器自己完成的 而在背后识别是完全不懂的两种记录方式。。。&lt;/p&gt;

&lt;p&gt;不要以为这只是一个故事&lt;br /&gt;
千万千万要搞清楚&lt;br /&gt;
不然的话。。。&lt;/p&gt;

&lt;p&gt;在你为了吃鸡装了windows 然后开发用linux的时候&lt;/p&gt;

&lt;p&gt;CRLF&lt;br /&gt;
LF&lt;br /&gt;
CRLF&lt;br /&gt;
CRLF&lt;br /&gt;
LF&lt;br /&gt;
CRLF&lt;br /&gt;
CRLF&lt;br /&gt;
LF&lt;br /&gt;
LF&lt;br /&gt;
CRLF&lt;/p&gt;

&lt;p&gt;你就会跟哥一样惨&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;Jude&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;2018年1月28日&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/other/2018/01/28/about-enter.html</link>
        <guid isPermaLink="true">http://localhost:4000/other/2018/01/28/about-enter.html</guid>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>这是一篇影评</title>
        <description>&lt;p&gt;终于广袤的中华大地上容得下许多课桌的时候，却没有了读书的人。
                                                        —— 给《无问东西》&lt;/p&gt;

&lt;p&gt;没看过什么影评剧透，直接冲过去的。
先去世豪楼上那个电影院,打开猫眼一看，尼玛，只有第一排了。努力思考了一下，管他咯，第一排也上了，再打开猫眼一看，第一排也没了。。。遭&lt;br /&gt;
换一家远一些的，猫眼票价45，果断淘宝，老板说35不能再低，我们这个内部价格远低于票面价格，好成交，跑去打印机出票打出来一看上面写着“票价30元”。。。。又遭&lt;/p&gt;

&lt;p&gt;就是冲着清华去的，还有小明。不对，应该是晓明，以前我们单位有个小明，还有个小红，他们领衔主演的《小学数学》是每个人所有的童年。&lt;br /&gt;
去年年底的时候，一清华女发朋友圈分享这部电影花絮，于是戏谑：有没有奶茶妹妹？她私信弹回来说奶茶在他们圈子口碑不好。女人啊！高知的女人啊！在这种问题上的表现还是一样。但我没有回复过去，因为我没有搞清楚 “妒忌”和“嫉妒”是什么区别。&lt;br /&gt;
一语成谶，奶茶妹妹穿着她靠跳健美操进入清华的那身行头还是出场了，说了一句没听清的台词，然后摸了摸张震的猫。我说张震你怎么就抱着猫而不是不乌龟呢？第二天微博头条必须是：老板娘摸了张震的乌龟。&lt;br /&gt;
认识张震实在微信朋友圈，他是不是春晚打了一套拳，然后立刻有个脑残粉刷圈“我震巨帅”，怎么就你震了，我还车震呢。张震刚出场时候的那种眼神，就隐约猜到了导演整部电影想要表达什么，后来发现，猜对了。&lt;br /&gt;
晓明则是读着我最向往的专业，18岁的时候高考填报志愿我爸问我想学什么，我回答了三个：计算机、机器人、原子弹。看到原子弹研发成功回来的火车上晓明头发掉落的画面，我在想，计算机和原子弹，在头发这个点上，终于殊途同归了。&lt;br /&gt;
这里面最幸福的当属晓明，我们统计笑脸的数量即可发觉，尤其是跟张震比起来。晓明从小生活在极度贫困的地方，爱人被毁容，又去了遥远的地方封闭式研发，见不到自己的爱人也无法通信，但他一生和平幸福。而张震公司高管，都市金领，带着女秘书出入各种场合，健身房体育馆一个不少，每天愁眉不展。你觉得他幸福？？？？
吗？？？？&lt;br /&gt;
而这，才是我们这个时代亟需解决的首要问题。而这该不该是每个时代每个鲜活的人所要去面对和思考的唯一问题——关于活着。于是在这么大的问题笼罩下，连“清华”这个logo的充其量也只能算个噱头。所以许多清华人才会觉得懵逼和突唐，如果把影片中清华的成分全部去掉，除了票房，对影片也不会有什么质的影响。如果非要用一句话来概括这个问题，我想因该是这句。应该是程楚生物理挂科了去找梅贻琦先生，校长稳稳当当坐在那里，胸中有万卷书，目光缓缓而坚毅，宛如一座泰山。&lt;br /&gt;
“什么是真实? ”&lt;br /&gt;
“你看到什么，听到什么，做什么，和谁在一起。有一种，从心灵深处，满溢出来的不懊悔，也不羞耻的平和与喜悦。”&lt;/p&gt;

&lt;p&gt;泰山在说话的时候，电影的时间线里还没有晓明，也没有力宏。哦对了，力宏，怎么文章都写完了还没有提到力宏。&lt;br /&gt;
因为直到现在我还是没有搞清楚， “妒忌”和“嫉妒”是什么区别。&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;Jude&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;2018年1月21日&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/other/2018/01/21/ying-ping.html</link>
        <guid isPermaLink="true">http://localhost:4000/other/2018/01/21/ying-ping.html</guid>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>游记</title>
        <description>&lt;p&gt;为了保证每个页面URL的唯一性和可读性，jekyll规范的做法是每篇文章题目要翻译成英文并填写到规定的位置，比如这篇文章的标题叫zou-si-fang（走四方）&lt;/p&gt;

&lt;h1 id=&quot;山丘&quot;&gt;山丘&lt;/h1&gt;
&lt;p&gt;“为何记不得上一次是谁给的拥抱，在什么时候。”——李宗盛 《山丘》&lt;br /&gt;
我非常清除的记得第一次听这首歌是在什么时候。&lt;br /&gt;
那是几年前，在单位附近租了一个房间，一套房隔出了七八间来。里面一张床、一张电脑桌、椅子。这时全部的家具。&lt;br /&gt;
床的尺寸是一米二乘两米，我的身高是一米八五，所以只能有唯一的一种睡姿，就是伟大领袖的睡姿，去毛主席纪念馆看看就知道了。&lt;br /&gt;
躺着玩手机看小李出新歌了，说这首歌写了十年，心理有一种类似当你期待周杰伦新专辑的感觉。点开一听。完蛋了。。&lt;br /&gt;
就歌曲循环然后盯着天花板看了一夜，有没有流泪或许有。&lt;br /&gt;
第二天去上班跟两江说，小李子出了一首歌叫《山丘》你去听听吧。心理却想，推荐个屁，拿去哭吧，男人哭吧哭吧不是罪。对了，老江以吹拉弹唱著称。&lt;br /&gt;
然后第三天，老江没有说一句话。&lt;br /&gt;
很多年以后的某一天江总要自立门户，跑来找我还有几个小兄弟说，我们要自己弄一个创投公司，各种人员安排差不多了，好的啊先取个名字吧。&lt;br /&gt;
“山丘创投”&lt;/p&gt;

&lt;h1 id=&quot;海滩&quot;&gt;海滩&lt;/h1&gt;
&lt;p&gt;海滩和妓女的英文发音几乎一模一样读作“必其”。也就是说你在海边小镇找到一个妙龄少女问路：请问“必其”在哪里？ 她会悄悄告诉你：我就是啊！&lt;br /&gt;
哥基本上已经葬身那片海了。坐标泰国南部普吉岛西南的一个叫KATA的海滩，放眼望去都是西方人，再放眼望去，才是碧海南天。&lt;br /&gt;
那哥呢？ 哥见了海一兴奋误以为小时候西河坝游来回没得问题，在这里肯定是武林高手直接往海里面冲再加上浪一打，越飘越远，漂离了海岸线很远了。。。。&lt;br /&gt;
那个浪一浪接着一浪，比哥打撸啊撸的时候浪多了，我想惨了 要往回去了 周围都没人了，人都在海滩那边在岸，哥却在海中间离岸状态，游了半天不光没有回去，反而打更远了。&lt;br /&gt;
已经没劲了，游不动了，然后我的腿，抽筋了。&lt;br /&gt;
踩不到底，浪子很大，没有任何浮力设备，体力不支，抽筋，周围没人。&lt;br /&gt;
这可能是哥离开这个世界时候的最后的画面我想，然后一股恐惧冲动涌上心头。&lt;br /&gt;
看到距离岸边更近处有两个大叔在冲浪&lt;br /&gt;
“excuse me！！！help！！！！！”&lt;br /&gt;
大叔冲的兴致勃勃看了这边一眼：me？&lt;br /&gt;
他不懂英文！！！！！我用尽最后力气使劲喊，因为海浪噪音非常大：我不怎么会游泳，飘过来了，可不可以把我们送回岸上？&lt;br /&gt;
比划了几下，他们就懂了，两个大叔划着冲浪板踏浪而来。&lt;br /&gt;
心理一瞬间就感觉得救了，如果他们不再旁边，喊叫也是无用了。&lt;br /&gt;
经过这个事故，我的眼镜丢了，大学配的眼镜，陪了我十多年，代替我，留在了这片茫茫的海中。&lt;br /&gt;
回到岸上，活生生捡了一条命，感谢两位大叔。&lt;br /&gt;
拖着疲惫的身躯往回走去看到一面红旗在飘摇，定睛一看， 此处禁止游泳&lt;br /&gt;
。。。。。。。。&lt;br /&gt;
….&lt;/p&gt;

&lt;p&gt;#后：
自从许朝军离开了人人网混乱了以后就在没有地方可以写日志了，老许去追求独特的感官，搞了一个app叫啪啪。&lt;br /&gt;
他倒是去啪啪了，人人网里面的妹纸都走光了。&lt;br /&gt;
管他咯，自己做一个有何不可。更关键的是服务器是在墙外的。&lt;br /&gt;
墙里秋千墙外道，墙外行人，墙里哥在笑。&lt;br /&gt;
哈哈哈。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;Jude&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;2017年9月28日&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Sep 2017 00:32:55 +0800</pubDate>
        <link>http://localhost:4000/other/2017/09/28/zou-si-fang.html</link>
        <guid isPermaLink="true">http://localhost:4000/other/2017/09/28/zou-si-fang.html</guid>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>重新用回Linux</title>
        <description>&lt;p&gt;今天装ubuntu机装了三次，   有木有！！！！！第一次删了个重要的东西，重装有木有！！！！！！ &lt;br /&gt;
然后我在过程中无聊装了一个NVIDIA的驱动，有木有！！！！！！结果重启无法开机有木有！！！！！命令行也打不开有木有！！！！！重装有木有！！！！！！！&lt;/p&gt;

&lt;h1 id=&quot;修改grub&quot;&gt;修改grub&lt;/h1&gt;
&lt;p&gt;双系统开机紫色背景，修改grub默认win7启动 
edit挂的默认的编辑器不知道什么 目测长得像vim 结果尼玛命令模式下看起来还好 点一下i编辑 尼玛上下左右都不能用有木有！！！！！上下左右终端居然显示ABCD字符有木有！！！！！&lt;br /&gt;
连个Backspace删除都不行有木有！！！！！！&lt;br /&gt;
虽然很sb的编辑器研究过后发现 打开进去命令模式下使用x删除 然后按a进入编辑模式在光标后面输入 然后esc退到命令模式:wq 搞定&lt;/p&gt;

&lt;p&gt;其实可以重置一下vim就搞定了 依次&lt;br /&gt;
sudo apt-get remove vim-common&lt;br /&gt;
sudo apt-get install vim&lt;br /&gt;
好了 再edit就是vim了&lt;/p&gt;

&lt;p&gt;但是好奇得很为什么上下左右是ABCD，猜测是不是以前有个系统计算机键盘没有上下左右哦 
最后尼玛搜到了居然果然是这样。。。因为因为 vi 之父, Bill Joy 当年用的键盘是这样的。。。&lt;/p&gt;

&lt;h1 id=&quot;另&quot;&gt;另&lt;/h1&gt;
&lt;p&gt;微信空间成了主流 里面短小的信息充数着各种流言蜚语 淹没在各种养生鸡汤中
最后只有自己搭建一块还算清净的地方
默默写自己的blog&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Aug 2017 00:32:55 +0800</pubDate>
        <link>http://localhost:4000/other/2017/08/30/first-day.html</link>
        <guid isPermaLink="true">http://localhost:4000/other/2017/08/30/first-day.html</guid>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Aug 2017 23:18:55 +0800</pubDate>
        <link>http://localhost:4000/jekyll/update/2017/08/29/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2017/08/29/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
